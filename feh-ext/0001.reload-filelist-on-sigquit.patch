diff --git a/src/signals.c b/src/signals.c
index dc8786f..3521fef 100644
--- a/src/signals.c
+++ b/src/signals.c
@@ -85,7 +85,6 @@ void feh_handle_signal(int signo)
 			return;
 		case SIGINT:
 		case SIGTERM:
-		case SIGQUIT:
 			if (childpid)
 				killpg(childpid, SIGINT);
 			sig_exit = 128 + signo;
@@ -95,7 +94,10 @@ void feh_handle_signal(int signo)
 	winwid = winwidget_get_first_window_of_type(WIN_TYPE_SLIDESHOW);
 
 	if (winwid) {
-		if (filelist_len > 1) {
+		if (signo == SIGQUIT) {
+			feh_reload_filelist(winwid);
+			slideshow_change_image(winwid, SLIDE_LAST, 1); }
+		else if (filelist_len > 1) {
 			if (signo == SIGUSR1)
 				slideshow_change_image(winwid, SLIDE_NEXT, 1);
 			else if (signo == SIGUSR2)
@@ -110,3 +112,56 @@ void feh_handle_signal(int signo)
 
 	return;
 }
+
+void feh_reload_filelist(winwidget w)
+{
+	gib_list *l;
+	char *current_filename;
+
+	/*
+	 * multi-window mode has no concept of a "current file" and
+	 * dynamically adding/removing windows is not implemented at the moment.
+	 * So don't reload filelists in multi-window mode.
+	 */
+	if (current_file == NULL) return;
+
+	/* save the current filename for refinding it in new list */
+	current_filename = estrdup(FEH_FILE(current_file->data)->filename);
+
+	for (l = filelist; l; l = l->next) {
+		feh_file_free(l->data);
+		l->data = NULL;
+	}
+	gib_list_free_and_data(filelist);
+	filelist = NULL;
+	filelist_len = 0;
+	current_file = NULL;
+
+	/* rebuild filelist from original_file_items */
+	if (gib_list_length(original_file_items) > 0)
+		for (l = gib_list_last(original_file_items); l; l = l->prev)
+			add_file_to_filelist_recursively(l->data, FILELIST_FIRST);
+	else if (!opt.filelistfile && !opt.bgmode)
+		add_file_to_filelist_recursively(".", FILELIST_FIRST);
+
+	if (opt.filelistfile)
+		filelist = gib_list_cat(filelist, feh_read_filelist(opt.filelistfile));
+
+	if (!(filelist_len = gib_list_length(filelist))) eprintf("No files found to reload.");
+
+	feh_prepare_filelist();
+
+	/* find the previously current file */
+	for (l = filelist; l; l = l->next)
+		if (strcmp(FEH_FILE(l->data)->filename, current_filename) == 0) {
+			current_file = l;
+			break;
+		}
+
+	free(current_filename);
+
+	if (!current_file) current_file = filelist;
+	w->file = current_file;
+
+	return;
+}

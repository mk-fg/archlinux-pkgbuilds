## Based on the Waterfox from AUR by random-nick, which is in turn based on official firefox package in the repos.
# Waterfox Current tracks Firefox ESR releases: G3.2 = 78, G4.0 = 91, G5.0 = 102, G6.0 = 115, G6.5 = 128
# Source repo: https://github.com/BrowserWorks/Waterfox
# This build requires large amount of RAM (30-40 gigs), using gcc with pgo+lto - https://bugs.gentoo.org/837122

pkgname=waterfox
pkgver=6.5.1

_archivename=$pkgver
_src=Waterfox-$_archivename.tar.gz::https://github.com/BrowserWorks/Waterfox/archive/$_archivename.tar.gz
_dir=Waterfox-$_archivename

## Example to test-build specific commit
# _archivename=6.5.0-beta-X
# _src=Waterfox-$_archivename-<hash-short>.tar.gz::https://github.com/BrowserWorks/Waterfox/archive/<hash>.tar.gz
# _dir=Waterfox-<hash>

_src_l10n_hash=3046738340d44e4ac76d29f96abc06a4ae71c1ad # make sure to update with pkgver above
_src_l10n=Waterfox-l10n-$_archivename.tar.gz::https://github.com/BrowserWorks/l10n/archive/$_src_l10n_hash.tar.gz
_src_submods=( l10n-$_src_l10n_hash:waterfox/browser/locales )

source=( $_src $_src_l10n $pkgname.desktop )
b2sums=(
	c32ab73278693126d7794ed32dc5718591e730a83820f3107b0e5de5fdced9104ca58a8a7453dc602d40871d713c6d150f05ee44c80d053169ecdd3cd5dac74c
	7b36ba58a34a9af4d77081889a09ef5b8a5dd47f6144c1f0f5941282877594f33d4e284ce590d4b6e9f77a9c9d28822489de664ce85eb90f0bf5f2ec13620012
	SKIP )

pkgrel=1
pkgdesc='Fork of Mozilla Firefox featuring some legacy extensions, removed telemetry and no Pocket integration, current branch.'
arch=(x86_64)
license=(MPL-2.0)
url='https://www.waterfox.net/'

depends=(
	cairo
	dbus
	ffmpeg
	fontconfig
	freetype2
	gcc-libs
	gdk-pixbuf2
	glib2
	glibc
	gtk3
	libpulse
	libx11
	libxcb
	libxcomposite
	libxdamage
	libxext
	libxfixes
	libxrandr
	libxss
	libxt
	mime-types
	nspr
	nss
	pango
	ttf-font
)

makedepends=(
	cbindgen
	clang
	diffutils
	imake
	inetutils
	lld
	llvm
	mesa
	nasm
	nodejs
	python
	rust
	unzip
	wasi-compiler-rt
	wasi-libc
	wasi-libc++
	wasi-libc++abi
	xorg-server-xvfb
	yasm
	zip
)

optdepends=(
	'libnotify: Notification integration'
	'speech-dispatcher: Text-to-Speech'
	'hunspell-en_US: Spell checking, American English')
options=(!emptydirs !makeflags !strip !lto !debug)
# _disable_pgo=y # uncomment this to disable building the profiled browser and using PGO


# Note on ResistFingerPrinting (RFP) relax-patches: these are intended for full RFP mode
#   Recently there is also a "lite" FPP mode, see here for details - https://github.com/arkenfox/user.js/issues/1716
#   "RFPTargets don't really interact with the RFP pref" (for FPP), so stuff is patched out of there
#   Remote Settings/Overrides (Mozilla list of which sites to exclude from FPP) also shouldn't affect RFP
local_patches=()
for p in [0-9][0-9][0-9][0-9].*.patch
	do local_patches+=( $p ); source+=( $p ); b2sums+=( SKIP ); done


gen_mozconfig() {
	cat >../mozconfig <<END
### From .mozconfig-x86_64-pc-linux-gnu in Waterfox repo, modified

# ac_add_options --enable-lto=full -- enabled below
ac_add_options --enable-optimize="-O2 -w"
ac_add_options --enable-release
ac_add_options --enable-rust-simd
export RUSTC_OPT_LEVEL=2
export MOZILLA_OFFICIAL=1
export RUSTFLAGS="$RUSTFLAGS -Ctarget-cpu=x86-64"

ac_add_options --disable-crashreporter
ac_add_options --disable-debug
ac_add_options --disable-dmd
ac_add_options --disable-geckodriver
ac_add_options --disable-profiling
ac_add_options --disable-tests

# ac_add_options --enable-alsa -- selected below
ac_add_options --enable-application=browser
ac_add_options --enable-install-strip
ac_add_options --enable-jxl
ac_add_options --enable-linker=lld
# ac_add_options --enable-pulseaudio -- selected below
ac_add_options --enable-strip
ac_add_options --disable-bootstrap
# ac_add_options --enable-unverified-updates -- disabled below
# ac_add_options --enable-updater -- disabled below

ac_add_options --target=x86_64-pc-linux-gnu

ac_add_options --with-app-basename=Waterfox
ac_add_options --with-app-name=waterfox
ac_add_options --with-branding=waterfox/browser/branding
ac_add_options --with-distribution-id=net.waterfox
ac_add_options --with-l10n-base="$PWD"/waterfox/browser/locales

mk_add_options AUTOCLOBBER=1
export MOZ_INCLUDE_SOURCE_INFO=1
export MOZ_REQUIRE_SIGNING=
export MOZ_TELEMETRY_REPORTING=

### Local tweaks

# Required to avoid "regenerating build backend" picking FasterMakeBackend, which fails with:
#   No rule to make target 'backend.FasterMakeBackend', needed by 'pre-export'.  Stop.
# Forgot to check why backend is regenerated though, so might be also fixable elsewhere.
ac_add_options --build-backends=RecursiveMake

# LTO can eat a lot of memory, so try to avoid eating it in parallel at least
mk_add_options MOZ_MAKE_FLAGS=-j8

ac_add_options --enable-pulseaudio
ac_add_options --disable-alsa
ac_add_options --disable-jack

ac_add_options --disable-jprof
ac_add_options --disable-updater

ac_add_options --prefix=/usr
ac_add_options --enable-hardening
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --with-wasi-sysroot=/usr/share/wasi-sysroot

mk_add_options MOZ_OBJDIR=./obj-"$(uname -s)"-"$(uname -m)"

### Options for specific build pass follow
END
}

prepare() {
	mkdir -p mozbuild
	cd $_dir

	local p dir_src dir_dst
	for p in "${_src_submods[@]}"; do
		dir_src=${p%%:*} dir_dst=${p#*:}
		cp -a "$srcdir"/$dir_src/. $dir_dst/
	done

	local p
	for p in ${local_patches[@]}; do
		echo "--- applying local patch: $p"
		patch --dry-run -tNp1 -i "$srcdir"/$p && patch -tNp1 -i "$srcdir"/$p \
			|| { echo >&2 "ERROR: Patch failed - $p"; exit 1; }
	done

	gen_mozconfig

	# Submodules are fetched as empty dirs in github archive, so check for changes
	grep -oP '(?<=url = ).*' .gitmodules |
		b2sum --strict --quiet -c <((echo '37ac5b50  -')) || {
			echo >&2 "ERROR: List of submodule URLs changed - add/update sources"; exit 1; }
}

build() {
	cd $_dir

	export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=pip
	export MOZBUILD_STATE_PATH="$srcdir/mozbuild"
	export MOZ_BUILD_DATE="$(date -u${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH} +%Y%m%d%H%M%S)"
	# export MOZ_ENABLE_FULL_SYMBOLS=1 - for debug build only
	export MOZ_NOSPAM=1

	# malloc_usable_size is used in various parts of the codebase
	CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
	CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
	# -fexceptions breaks 128+ builds - https://bugzilla.mozilla.org/show_bug.cgi?id=1907251
	CFLAGS="${CFLAGS/-fexceptions/}"
	CXXFLAGS="${CXXFLAGS/-fexceptions/}"
	# suppress warnings
	CFLAGS+=" -w"
	CXXFLAGS+=" -w"

	# LTO needs more open files
	ulimit -n 4096

	if [[ -z $_disable_pgo ]]; then
	# Do 3-tier PGO
	echo; echo "----- Building instrumented browser -----"; echo
	cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-profile-generate=cross
END
	./mach build --priority normal
	./mach package

	echo; echo "----- Profiling instrumented browser -----"; echo
	LLVM_PROFDATA=llvm-profdata JARLOG_FILE="$PWD/jarlog" \
		MOZ_DISABLE_CONTENT_SANDBOX=1 \
		MOZ_DISABLE_GMP_SANDBOX=1 \
		MOZ_DISABLE_GPU_SANDBOX=1 \
		MOZ_DISABLE_RDD_SANDBOX=1 \
		MOZ_DISABLE_SOCKET_PROCESS_SANDBOX=1 \
		MOZ_DISABLE_UTILITY_SANDBOX=1 \
		MOZ_DISABLE_VR_SANDBOX=1 \
		GTK_A11Y=none NO_AT_BRIDGE=1 dbus-run-session \
		xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
		./mach python build/pgo/profileserver.py

	[[ -s merged.profdata ]] || { echo >&2 "ERROR: No profile data produced"; return 1; }
	stat -c "Profile data found (%s bytes)" merged.profdata
	[[ -s jarlog ]] || { echo >&2 "ERROR: No jarlog produced"; return 1; }
	stat -c "Profile jarlog found (%s bytes)" jarlog

	echo; echo "----- Removing instrumented browser -----"; echo
	./mach clobber objdir

	echo; echo "----- Building optimized browser -----"; echo
	cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-lto=cross,full
ac_add_options --enable-profile-use=cross
ac_add_options --with-pgo-profile-path=${PWD@Q}/merged.profdata
ac_add_options --with-pgo-jarlog=${PWD@Q}/jarlog
END

	else
	echo; echo "----- Building browser without PGO -----"; echo
	cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-lto
END
	fi

	./mach build
}

package() {
	cd $_dir
	echo; echo "----- Packaging -----"; echo
	DESTDIR="$pkgdir" ./mach install

	local vendorjs="$pkgdir/usr/lib/$pkgname/browser/defaults/preferences/vendor.js"
	install -Dvm644 /dev/stdin "$vendorjs" <<END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Don't disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);
END

	local distini="$pkgdir/usr/lib/$pkgname/distribution/distribution.ini"
	install -Dvm644 /dev/stdin "$distini" <<END
[Global]
id=archlinux
version=1.0
about=Waterfox for Arch Linux

[Preferences]
app.distributor=archlinux
app.distributor.channel=$pkgname
END

	local p
	for p in 16 32 48 64 128 256; do
		install -Dvm644 waterfox/browser/branding/default$p.png \
			"$pkgdir/usr/share/icons/hicolor/${p}x${p}/apps/$pkgname.png"
	done
	install -Dvm644 waterfox/browser/branding/content/about-logo.png \
		"$pkgdir/usr/share/icons/hicolor/192x192/apps/$pkgname.png"
	install -Dvm644 waterfox/browser/branding/content/about-logo@2x.png \
		"$pkgdir/usr/share/icons/hicolor/384x384/apps/$pkgname.png"
	install -Dvm644 waterfox/browser/branding/content/about-logo.svg \
		"$pkgdir/usr/share/icons/hicolor/scalable/apps/$pkgname.svg"

	install -Dvm644 ../$pkgname.desktop \
		"$pkgdir/usr/share/applications/$pkgname.desktop"

	# Remove unnecessary duplicate binary
	# https://bugzilla.mozilla.org/show_bug.cgi?id=658850
	rm "$pkgdir/usr/lib/$pkgname/waterfox-bin" \
		|| echo >&2 "WARNING: unnecessary rm for waterfox-bin duplicate binary, clean it up"
}

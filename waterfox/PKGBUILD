## Based on the Waterfox from AUR by random-nick, which is in turn based on official firefox package in the repos.
# Waterfox Current tracks Firefox ESR releases: G3.2 = 78, G4.0 = 91, G5.0 = 102
# Source repo: https://github.com/WaterfoxCo/Waterfox

pkgname=waterfox
pkgver=G5.0.1
_archivename=$pkgver

pkgrel=1
pkgdesc="Fork of Mozilla Firefox featuring some legacy extensions, removed telemetry and no Pocket integration, current branch."
arch=(x86_64)
license=(MPL GPL LGPL)
url="https://www.waterfox.net/"
depends=(gtk3 libxt mime-types dbus-glib ffmpeg libpulse nss ttf-font)
makedepends=(
	unzip zip diffutils yasm mesa imake inetutils
	xorg-server-xvfb autoconf2.13 rust clang llvm lld
	nodejs cbindgen nasm python dump_syms
	wasi-compiler-rt wasi-libc wasi-libc++ wasi-libc++abi )
optdepends=(
	'libnotify: Notification integration'
	'speech-dispatcher: Text-to-Speech'
	'hunspell-en_US: Spell checking, American English')
options=(!emptydirs !makeflags !strip !lto !debug)
source=(
	Waterfox-$_archivename.tar.gz::https://github.com/WaterfoxCo/Waterfox/archive/$_archivename.tar.gz
	$pkgname.desktop )
sha256sums=( f6e85c7bf41f16fd5d55fb1a70e2836cb8f7ec2f30e663af52bf4360ad9195a8 SKIP )
# _disable_pgo=y # uncomment this to disable building the profiled browser and using PGO

local_patches=()
for p in 9999-*.patch ; do local_patches+=( $p ); source+=( $p ); sha256sums+=( SKIP ); done

prepare() {
	mkdir -p mozbuild
	cd Waterfox-$_archivename

	cat >../mozconfig <<END
# From .mozconfig-x86_64-pc-linux-gnu in Waterfox repo, modified

ac_add_options --target=x86_64-pc-linux-gnu

ac_add_options --enable-release
ac_add_options --enable-optimize="-O2 -w"
ac_add_options --enable-rust-simd
export RUSTC_OPT_LEVEL=2

ac_add_options --enable-pulseaudio
ac_add_options --disable-alsa
ac_add_options --disable-jack

ac_add_options --disable-crashreporter
ac_add_options --disable-debug
ac_add_options --disable-dmd
ac_add_options --disable-geckodriver
ac_add_options --disable-jprof
ac_add_options --disable-profiling
ac_add_options --disable-trace-logging
ac_add_options --disable-verify-mar
ac_add_options --disable-updater

ac_add_options --enable-application=browser
ac_add_options --enable-install-strip
ac_add_options --enable-strip
ac_add_options --disable-bootstrap
ac_add_options --disable-tests

ac_add_options --with-app-basename=Waterfox
ac_add_options --with-app-name=waterfox
ac_add_options --with-branding=waterfox/browser/branding
ac_add_options --with-distribution-id=net.waterfox
ac_add_options --with-l10n-base="$PWD"/waterfox/browser/locales

mk_add_options AUTOCLOBBER=1
mk_add_options MOZ_OBJDIR=./obj-"$(uname -s)"-"$(uname -m)"
export MOZ_REQUIRE_SIGNING=

# Local tweaks

mk_add_options MOZ_MAKE_FLAGS=-j4
ac_add_options --prefix=/usr
ac_add_options --enable-hardening
ac_add_options --enable-linker=lld
ac_add_options --with-system-nspr
ac_add_options --with-system-nss
ac_add_options --with-wasi-sysroot=/usr/share/wasi-sysroot

# Options for specific build pass follow
END

	local p
	for p in ${local_patches[@]}; do
		echo "--- applying local patch: $p"
		patch --dry-run -tNp1 -i "$srcdir"/$p && patch -tNp1 -i "$srcdir"/$p
	done
}

build() {
	cd Waterfox-$_archivename

	export MOZ_NOSPAM=1
	export MOZBUILD_STATE_PATH="$srcdir/mozbuild"
	export MACH_BUILD_PYTHON_NATIVE_PACKAGE_SOURCE=pip

	# LTO needs more open files
	ulimit -n 4096

	# suppress warnings
	CFLAGS+=" -w"
	CXXFLAGS+=" -w"

	if [[ -z $_disable_pgo ]]; then
	# Do 3-tier PGO
	echo "----- Building instrumented browser -----"
	cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-profile-generate=cross
END
	./mach build
	./mach package

	echo "----- Profiling instrumented browser -----"
	LLVM_PROFDATA=llvm-profdata \
		JARLOG_FILE="$PWD/jarlog" \
		xvfb-run -s "-screen 0 1920x1080x24 -nolisten local" \
		./mach python build/pgo/profileserver.py

	[[ -s merged.profdata ]] || { echo >&2 "ERROR: No profile data produced"; return 1; }
	stat -c "Profile data found (%s bytes)" merged.profdata
	[[ -s jarlog ]] || { echo >&2 "ERROR: No jarlog produced"; return 1; }
	stat -c "Profile jarlog found (%s bytes)" jarlog

	echo "----- Removing instrumented browser -----"
	./mach clobber

	echo "----- Building optimized browser -----"
	cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-lto=cross
ac_add_options --enable-profile-use=cross
ac_add_options --with-pgo-profile-path=${PWD@Q}/merged.profdata
ac_add_options --with-pgo-jarlog=${PWD@Q}/jarlog
END

	else
	echo "----- Building browser without PGO -----"
	cat >.mozconfig ../mozconfig - <<END
ac_add_options --enable-lto=cross
END
	fi

	./mach build
}

package() {
	cd Waterfox-$_archivename
	DESTDIR="$pkgdir" ./mach install

	local vendorjs="$pkgdir/usr/lib/$pkgname/browser/defaults/preferences/vendor.js"
	install -Dvm644 /dev/stdin "$vendorjs" <<END
// Use LANG environment variable to choose locale
pref("intl.locale.requested", "");

// Use system-provided dictionaries
pref("spellchecker.dictionary_path", "/usr/share/hunspell");

// Disable default browser checking.
pref("browser.shell.checkDefaultBrowser", false);

// Don't disable extensions in the application directory
pref("extensions.autoDisableScopes", 11);
END

	local distini="$pkgdir/usr/lib/$pkgname/distribution/distribution.ini"
	install -Dvm644 /dev/stdin "$distini" <<END
[Global]
id=archlinux
version=1.0
about=Waterfox for Arch Linux

[Preferences]
app.distributor=archlinux
app.distributor.channel=$pkgname
END

	local p theme=waterfox
	for p in 16 32 48 64 128; do
		install -Dvm644 browser/branding/$theme/default$p.png \
			"$pkgdir/usr/share/icons/hicolor/${p}x${p}/apps/$pkgname.png"
	done
	install -Dvm644 browser/branding/$theme/content/about-logo.png \
		"$pkgdir/usr/share/icons/hicolor/192x192/apps/$pkgname.png"
	install -Dvm644 browser/branding/$theme/content/about-logo@2x.png \
		"$pkgdir/usr/share/icons/hicolor/384x384/apps/$pkgname.png"
	install -Dvm644 browser/branding/$theme/content/about-logo.svg \
		"$pkgdir/usr/share/icons/hicolor/scalable/apps/$pkgname.svg"

	install -Dvm644 ../$pkgname.desktop \
		"$pkgdir/usr/share/applications/$pkgname.desktop"

	# Remove unnecessary duplicate binary
	# https://bugzilla.mozilla.org/show_bug.cgi?id=658850
	rm "$pkgdir/usr/lib/$pkgname/waterfox-bin" \
		|| echo >&2 "WARNING: unnecessary rm for waterfox-bin duplicate binary, clean it up"
}
